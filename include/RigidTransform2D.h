#pragma once
#include "Rotation2D.h"
#include "Translation2D.h"


class RigidTransform2D
{
public:
    //////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D();

    //////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D(const Translation2D &translation, const Rotation2D &rotation);

    //////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D(const RigidTransform2D &other);

    //////////////////////////////////////////////////////////////////////
    // create transform from translation
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D fromTranslation(const Translation2D &translation);

    //////////////////////////////////////////////////////////////////////
    // create transform from rotation
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D fromRotation(const Rotation2D &rotation);

    //////////////////////////////////////////////////////////////////////
    // destructor
    //////////////////////////////////////////////////////////////////////
    ~RigidTransform2D();

    //////////////////////////////////////////////////////////////////////
    // overloaded assignment operator
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D& operator=(const RigidTransform2D &other);

    //////////////////////////////////////////////////////////////////////
    // transform transform by other transform
    // other        other transform
    // return       transformed transform
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D transformBy(const RigidTransform2D &other);

    //////////////////////////////////////////////////////////////////////
    // get translation
    // return translation
    //////////////////////////////////////////////////////////////////////
    Translation2D& getTranslation();

    //////////////////////////////////////////////////////////////////////
    // get rotation
    // return rotation
    //////////////////////////////////////////////////////////////////////
    Rotation2D& getRotation();

    //////////////////////////////////////////////////////////////////////
    // set translation
    // translation  translation
    //////////////////////////////////////////////////////////////////////
    void setTranslation(const Translation2D &translation);

    //////////////////////////////////////////////////////////////////////
    // set rotation
    // rotation     rotation
    //////////////////////////////////////////////////////////////////////
    void setRotation(const Rotation2D &rotation);

    //////////////////////////////////////////////////////////////////////
    // invert transform
    // return       inverted transform
    //////////////////////////////////////////////////////////////////////
    RigidTransform2D inverse();

private:
    Translation2D m_translation;
    Rotation2D m_rotation;
};
