//////////////////////////////////////////////////////////////////////
// library for 2D vectors/rigid body translations
//////////////////////////////////////////////////////////////////////
#pragma once
#include "Rotation2D.h"

class Translation2D
{
public:
    //////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////
    Translation2D();

    //////////////////////////////////////////////////////////////////////
    // constructor
    // x            x component of vector
    // y            y component of vector
    //////////////////////////////////////////////////////////////////////
    Translation2D(const double &x, const double &y);

    //////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////
    Translation2D(const Translation2D &other);

    //////////////////////////////////////////////////////////////////////
    // destructor
    //////////////////////////////////////////////////////////////////////
    ~Translation2D();

    //////////////////////////////////////////////////////////////////////
    // overloaded assignment operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator=(const Translation2D &other);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary addition operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator+=(const Translation2D &rhs);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary addition operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator+=(const double &rhs);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary subtraction operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator-=(const Translation2D &rhs);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary subtraction operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator-=(const double &rhs);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary multiplication operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator*=(const double &rhs);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary division operator
    //////////////////////////////////////////////////////////////////////
    Translation2D& operator/=(const double &rhs);

    //////////////////////////////////////////////////////////////////////
    // get x component of vector
    // return       x component of vector
    //////////////////////////////////////////////////////////////////////
    double getX() const;

    //////////////////////////////////////////////////////////////////////
    // get y component of vector
    // return       y component of vector
    //////////////////////////////////////////////////////////////////////
    double getY() const;

    //////////////////////////////////////////////////////////////////////
    // set x component of vector
    // x       x component of vector
    //////////////////////////////////////////////////////////////////////
    void setX(const double &x);

    //////////////////////////////////////////////////////////////////////
    // set y component of vector
    // y       y component of vector
    //////////////////////////////////////////////////////////////////////
    void setY(const double &y);

    //////////////////////////////////////////////////////////////////////
    // get norm of vector
    // return       norm of vector
    //////////////////////////////////////////////////////////////////////
    double norm() const;

    //////////////////////////////////////////////////////////////////////
    // get dot product of vectors
    // other        other vector
    // return       dot product
    //////////////////////////////////////////////////////////////////////
    double dot(Translation2D &other);

    //////////////////////////////////////////////////////////////////////
    // get cross product of vectors
    // other        other vector
    // return       cross product
    //////////////////////////////////////////////////////////////////////
    double cross(Translation2D &other);

    //////////////////////////////////////////////////////////////////////
    // invert vector
    // return       inverted vector
    //////////////////////////////////////////////////////////////////////
    Translation2D inverse() const;

    //////////////////////////////////////////////////////////////////////
    // translate vector by translation
    // other        translation to translate by
    // return       translated vector
    //////////////////////////////////////////////////////////////////////
    Translation2D translateBy(const Translation2D &other) const;

    //////////////////////////////////////////////////////////////////////
    // rotate vector by rotation
    // rotation     rotation to rotate by
    // return       rotated vector
    //////////////////////////////////////////////////////////////////////
    Translation2D rotateBy(const Rotation2D &rotation) const;

    //////////////////////////////////////////////////////////////////////
    // scale vector by scalar
    // scalar       scalar to scale by
    // return       scaled vector
    //////////////////////////////////////////////////////////////////////
    Translation2D scaleBy(const double &scalar) const;

    //////////////////////////////////////////////////////////////////////
    // overloaded binary addition operator
    //////////////////////////////////////////////////////////////////////
    const Translation2D operator+(const Translation2D &other);

    //////////////////////////////////////////////////////////////////////
    // overloaded binary subtraction operator
    //////////////////////////////////////////////////////////////////////
    const Translation2D operator-(const Translation2D &other);

private:
    double m_x;
    double m_y;
};
