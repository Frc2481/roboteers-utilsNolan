#ifndef TRANSLATION_2D_H
#define TRANSLATION_2D_H

#include "Rotation2D.h"

class Translation2D {
public:
    Translation2D();
    Translation2D(double x, double y);
    Translation2D(const Translation2D &other);
    ~Translation2D();

    Translation2D& operator=(const Translation2D &other);
    Translation2D& operator+=(const Translation2D &rhs);
    Translation2D& operator-=(const Translation2D &rhs);
	Translation2D operator+(const Translation2D &other) const;
    Translation2D operator-(const Translation2D &other) const;

    double getX() const;
    double getY() const;
    
    void setX(double x);
    void setY(double y);

    //////////////////////////////////////////////////////////////////////
    // @brief vector norm
    //////////////////////////////////////////////////////////////////////
    double norm() const;

    //////////////////////////////////////////////////////////////////////
    // @brief vector dot product
    //////////////////////////////////////////////////////////////////////
    double dot(const Translation2D &other) const;

    //////////////////////////////////////////////////////////////////////
    // @brief vector cross product
    //////////////////////////////////////////////////////////////////////
    double cross(const Translation2D &other) const;

    //////////////////////////////////////////////////////////////////////
    // @brief inverse of translation
    //////////////////////////////////////////////////////////////////////
    Translation2D inverse() const;

    //////////////////////////////////////////////////////////////////////
    // @brief vector addition
    //////////////////////////////////////////////////////////////////////
    Translation2D translateBy(const Translation2D &other) const;

    //////////////////////////////////////////////////////////////////////
    // @brief vector rotation
    //////////////////////////////////////////////////////////////////////
    Translation2D rotateBy(const Rotation2D &rotation) const;

    //////////////////////////////////////////////////////////////////////
    // @brief scale vector by scalar
    //////////////////////////////////////////////////////////////////////
    Translation2D scaleBy(double scalar) const;

private:
    double m_x;
    double m_y;
};

#endif // TRANSLATION_2D_H
